const { expect } = require('chai')
const Kingdom = require('../../src/castles/kingdom')

describe('Kingdom', function () {
  beforeEach(function () {
    const kingdom = new Kingdom()
    kingdom.name = 'My Kingdom'
    kingdom._castles = []
  })

  describe('new Kingdom', function () {
    it('creates a new instance of a Kingdom', function () {
      const name = 'My Kingdom'
      const kingdom = new Kingdom(name)

      expect(kingdom).to.be.instanceof(Kingdom)
      expect(kingdom.name).to.equal(name)
    })

    it('assigns an id', function () {
      const kingdom = new Kingdom()

      expect(kingdom.id).to.not.be.null
    })

    it('creates assigns a random name if none is provided', function () {
      const kingdom = new Kingdom()

      expect(kingdom).to.be.instanceof(Kingdom)
      expect(kingdom.name).to.not.be.null
      expect(kingdom.name).to.be.a('string')
    })

    it('can create multiple kingdoms', function () {
      const name = 'My Kingdom'
      const kingdomA = new Kingdom(name)
      const kingdomB = new Kingdom(name)

      expect(kingdomA).to.not.equal(kingdomB)
    })
  })

  describe('get #castles', function () {
    it('returns a list of castles', function () {
      const kingdom = new Kingdom()
      kingdom._castles = [ 'Castle' ]

      expect(kingdom.castles.length).to.equal(1)
    })
  })

  describe('set #castles', function () {
    it('does not allow castles to be modified', function () {
      const kingdom = new Kingdom()
      kingdom.castles = [ 'Something' ]

      expect(kingdom.castles.length).to.equal(0)
    })
  })

  describe('#createCastle()', function () {
    it('creates a new castle', function () {
      const kingdom = new Kingdom()
      kingdom.createCastle()

      expect(kingdom.castles.length).to.equal(1)
    })

    it('does not allow more than three castles', function () {
      const kingdom = new Kingdom()
      kingdom.createCastle().createCastle().createCastle().createCastle()

      expect(kingdom.castles.length).to.equal(3)
    })
  })

  describe('#attackCastle(id)', function () {
    it('deals damage to the specified castle', function () {
      const kingdom = new Kingdom()
      kingdom.createCastle().createCastle().createCastle()
      const castle = kingdom.castles[1]
      const previousHealth = castle.health

      kingdom.attackCastle(castle.id)

      expect(castle.health).to.be.below(previousHealth)
    })

    it('returns the castle it damaged', function () {
      const kingdom = new Kingdom()
      kingdom.createCastle().createCastle().createCastle()
      const castle = kingdom.castles[1]
      const result = kingdom.attackCastle(castle.id)

      expect(castle).to.equal(result)
    })

    it('returns false if the castle could not be found', function () {
      const kingdom = new Kingdom()
      const result = kingdom.attackCastle('ID')

      expect(result).to.be.false
    })
  })

  describe('#buildCastle(id)', function () {
    it('restores health to the specified castle', function () {
      const kingdom = new Kingdom()
      kingdom.createCastle().createCastle().createCastle()

      const castle = kingdom.castles[1]
      const previousHealth = castle.health

      kingdom.buildCastle(castle.id)

      expect(castle.health).to.be.above(previousHealth)
    })

    it('returns the castle it restored', function () {
      const kingdom = new Kingdom()
      kingdom.createCastle().createCastle().createCastle()
      const castle = kingdom.castles[1]
      const result = kingdom.buildCastle(castle.id)

      expect(castle).to.equal(result)
    })

    it('returns false if the castle could not be found', function () {
      const kingdom = new Kingdom()
      const result = kingdom.buildCastle('ID')

      expect(result).to.be.false
    })
  })
})
