const { expect } = require('chai')
const UsersService = require('../../src/users')

describe('UserService', function () {
  beforeEach(function () {
    UsersService._users = new Map()
  })

  describe('#users', function () {
    it('returns a list of users', function () {
      expect(UsersService.users).to.be.an.instanceOf(Array)
    })

    it('does not allow for users to be assigned', function () {
      const actual = () => UsersService.users = []
      expect(actual).to.throw
    })
  })

  describe('#create', function () {
    it('adds a user when a valid structure is inputted', function () {
      const user = { email: 'example123@example.com', username: 'example_123' }

      UsersService.create(user)
      expect(UsersService.users.length).to.equal(1)
      expect(UsersService.users[0]).to.equal(user)
    })

    it('returns the user after it has been created', function () {
      const user = { email: 'example456@example.com', username: 'example_456' }
      const result = UsersService.create(user)

      expect(UsersService.users[0]).to.equal(user)
    })

    it('throws an error when the user is invalid', function () {
      const user = { email: 'example', username: 'example_123' }
      const actual = () => UsersService.create(user)

      expect(actual).to.throw().with.property('message')
    })
  })

  describe('#find', function () {
    beforeEach(function () {
      const user = { email: 'findme@example.com', username: 'findme_123' }
      this.user = UsersService.create(user)
    })

    it('returns the specified user by id', function () {
      const user = UsersService.find(this.user.id)
      expect(user).to.equal(this.user)
    })

    it('returns null if the user could not be found', function () {
      const user = UsersService.find(1)
      expect(user).to.be.null
    })
  })

  describe('#destroy', function () {
    beforeEach(function () {
      const user = { email: 'findme@example.com', username: 'findme_123' }
      this.user = UsersService.create(user)
    })

    it('removes the user from the service by id', function () {
      UsersService.destroy(this.user.id)
      expect(UsersService._users.has(this.user.id)).to.be.false
    })

    it('returns the user if it was destroyed', function () {
      const actual = UsersService.destroy(this.user.id)
      expect(actual).to.equal(this.user)
    })

    it('returns null if the user could not be found', function () {
      const actual = UsersService.destroy(1)
      expect(actual).to.be.null
    })
  })
})
